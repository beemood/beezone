generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@beezone/sample-db"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id Int @id @default(autoincrement())

  name String @unique
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  productVariants ProductVariant[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  subCategories SubCategory[]
}

model SubCategory {
  id   Int    @id @default(autoincrement())
  name String @unique

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  products Product[]
}

model Attrbute {
  id    Int    @id @default(autoincrement())
  key   String
  value String

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])
  productVariantId String

  @@unique([key, productVariantId])
}

model Product {
  id         Int         @id @default(autoincrement())
  productId  String      @unique @default(uuid())
  category   SubCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  upc          String  @unique
  name         String  @unique
  desccription String?
  make         String?
  model        String?

  variants ProductVariant[]
}

model ProductVariant {
  id               Int     @id @default(autoincrement())
  productVariantId String  @unique @default(uuid())
  product          Product @relation(fields: [productId], references: [productId])
  productId        String
  tag              Tag     @relation(fields: [tagId], references: [id])
  tagId            Int

  sku     String @unique()
  barcode String @unique()

  attributes Attrbute[]
  prices     Price[]
  quantities Quantity[]
}

model Price {
  id               Int            @id @default(autoincrement())
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId], onDelete: Cascade, onUpdate: Cascade)
  productVariantId String
  priceLevel       PriceLevel     @relation(fields: [priceLevelId], references: [priceLevelId], onDelete: Cascade, onUpdate: Cascade)
  priceLevelId     String

  price Decimal
  cost  Decimal
}

model Quantity {
  id               Int            @unique @default(autoincrement())
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId], onDelete: Cascade, onUpdate: Cascade)
  productVariantId String
  store            Store          @relation(fields: [storeId], references: [storeId], onDelete: Cascade, onUpdate: Cascade)
  storeId          String

  quantity      Int
  alertQuantity Int
}

model PriceLevel {
  id           Int    @id @default(autoincrement())
  priceLevelId String @unique @default(uuid())

  name        String  @unique
  description String?
  taxrate     Decimal
  currency    String

  prices Price[]
  stores Store[]
}

model Store {
  id           Int        @unique @default(autoincrement())
  storeId      String     @unique() @default(uuid())
  priceLevel   PriceLevel @relation(fields: [priceLevelId], references: [priceLevelId])
  priceLevelId String

  name String @unique

  street     String
  city       String
  state      String
  postalCode String
  phone      String
  email      String
  website    String

  quantities Quantity[]
}
